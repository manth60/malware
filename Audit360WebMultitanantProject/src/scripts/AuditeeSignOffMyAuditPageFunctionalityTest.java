package scripts;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.testng.annotations.Test;

import com.aventstack.extentreports.Status;

import generic.BaseTest;
import generic.Lib;
import pom.AuditSchedulePageTest;
import pom.AuditeeSignOffPageTest;
import pom.LoginPageTest;
import pom.MyAuditsPageTest;

public class AuditeeSignOffMyAuditPageFunctionalityTest extends BaseTest {
//Test case 539
	//Testing the Functionality of the Audit Execution page
	@Test(priority=1)
	public void Signoffing_The_AuditType_Test() throws InterruptedException
	{
		LoginPageTest l=new LoginPageTest(driver);

		MyAuditsPageTest MA = new MyAuditsPageTest(driver);
		//Remove and and in main priority test 1
		parentTest = extent.createTest("A3-539 Auditee Sign-Off","Testing the functionality of Auditee Sign-Off");

		chiledTest = parentTest.createNode("Testing the functionality of the My audits page");

		System.out.println("Signoffing The AuditType Test");

//		EnABLE this at final test
//		l.ClickProfileBTN(driver);

//		l.ClickLogoutBTN();

		chiledTest.log(Status.INFO, "Entered Valid UserName and Valid Password");
		String un=Lib.getCellValue(XLPATH, "Login Credentials",52,0);
		l.setusername(un);

		String pw=Lib.getCellValue(XLPATH,"Login Credentials",52,1);
		l.setpassword(pw);

		//clicking on the Login Button
		l.ClickSigninBTN();
		chiledTest.log(Status.INFO, "Sigin Button is Clicked");

		//Verify Signed in Successfully Message is Displayed
		l.verifySignedInSuccessMsgIsDisplayed(driver);
		chiledTest.log(Status.INFO, "Signed in successfully. Success Message is Displayed");

		
		//Passing the invalid Values to Select Audit type
		String SAI = Lib.getCellValue(XLPATH, "Configure Audit Type", 207, 0);
		MA.SetSelectAuditType(SAI);
		chiledTest.log(Status.INFO, "User enter invalid input.");
		MA.VerifyNoMatchFoundMsgIsDisplayed(driver);
		//Clear invalid audit type
		MA.ClearSelectAudittype();
		chiledTest.log(Status.INFO, "Cleared invalid audit type.");
		
		String SA1 = Lib.getCellValue(XLPATH, "Configure Audit Type", 208, 0);
		MA.SetSelectAuditType(SA1);
		MA.SelectEnteredInputAudit();
		Thread.sleep(2000);
		String SA2 = Lib.getCellValue(XLPATH, "Configure Audit Type", 209, 0);
		MA.SetSelectAuditType(SA2);
		MA.SelectEnteredInputAudit();
	
		MA.DeslectAuditType();
		MA.DeslectAuditType();
		
		
		Thread.sleep(3000);
		//Clear multiple input of audit type
		MA.ClearSelectAudittype();
		chiledTest.log(Status.INFO, "Cleared invalid audit type.");
				
		

		//Passing the valid Values to Select Audit type
		String SA = Lib.getCellValue(XLPATH, "Configure Audit Type", 206, 0);
		MA.SetSelectAuditType(SA);

		MA.ClickMatched();
		chiledTest.log(Status.INFO, "Audit status having not accepted is selected.");
		//Make report from here
		AuditeeSignOffPageTest AS=new AuditeeSignOffPageTest(driver);
	//	AS.VerifyTypeOfAudit();
	//	System.out.println("Audit type is correctly displayed");
		chiledTest.log(Status.INFO, "Audit type is correctly displayed.");
		
	//	AS.VerifyAuditeeName();
	//	System.out.println("Auditee type is correctly displayed");
		chiledTest.log(Status.INFO, "Auditee type is correctly displayed.");
		
		AS.VerifyAuditorName();
		System.out.println("Auditor name is correctly displayed");
		chiledTest.log(Status.INFO, "Auditor name is correctly displayed.");
		
		AS.VerifyStatusOfAudit();
		System.out.println("Audit status is correctly displayed");
		chiledTest.log(Status.INFO, "Audit status not accepted is correctly displayed.");
		MA.DeslectAuditType();
		/*
		
		MA.ClickfirstAuditType(driver);

		AS.SelectNoButtonAcceptance();
		
		/*
		//clicking on the Sign Off Audit Button
		MA.ClickSingOffAuditButton(driver);

		//verifying the Are you sure you want to sign off this audit ? Pop Up is Displayed
		MA.VerifyAreYouSureYouWantToSignOffThisAuditPopupIsDisplayed(driver);

		//Clicking on the Due date 
		MA.ClickDueDate();

		//Passing the values to due Date
		String DD3 = Lib.getCellValue(XLPATH, "My Audit Page", 3, 6);
		MA.SetDueDate(DD3,driver);

		//clicking on the OK Button
		MA.ClickOKBTN();

		System.out.println("******************************");
		*/
	}

	
	@Test(priority=2)
	public void DateRange() throws InterruptedException {
		LoginPageTest l=new LoginPageTest(driver);

		MyAuditsPageTest MA = new MyAuditsPageTest(driver);	
		chiledTest = parentTest.createNode("User click on From and To date");
		String SD = Lib.getCellValue(XLPATH, "Configure Audit Type", 213, 0);
		MA.SetFromdate(SD, driver);
		chiledTest.log(Status.INFO, "The system should show a calendar popup & users should able to select the dates.");
		String ED = Lib.getCellValue(XLPATH, "Configure Audit Type", 214, 0);
		MA.SetTodate(ED, driver);
		chiledTest.log(Status.INFO, " Based on their date range, data should be displayed in the tables.");
		Thread.sleep(3000);
	}
	
	@Test(priority=3)
	public void SelectAuditee() throws InterruptedException {
		LoginPageTest l=new LoginPageTest(driver);

		MyAuditsPageTest MA = new MyAuditsPageTest(driver);	
		chiledTest = parentTest.createNode("User click on Auditee drop down.");
		String SD = Lib.getCellValue(XLPATH, "Configure Audit Type", 216, 0);
		MA.SetSelectAuditee(SD);
		Thread.sleep(2000);
		MA.SelectEnteredInputAuditee();
		chiledTest.log(Status.INFO, "Single Auditee selection from Drop-down.");
		
		String SD1 = Lib.getCellValue(XLPATH, "Configure Audit Type", 217, 0);
		MA.SetSelectAuditee(SD1);
		Thread.sleep(2000);
		MA.SelectEnteredInputAuditee();
		
		String SD2 = Lib.getCellValue(XLPATH, "Configure Audit Type", 218, 0);
		MA.SetSelectAuditee(SD2);
		Thread.sleep(2000);
		MA.SelectEnteredInputAuditee();
		chiledTest.log(Status.INFO, "Multiple Auditee selection from Drop-down.");
		MA.DeslectAuditType();
		MA.DeslectAuditType();
		MA.DeslectAuditType();
		
		//Invalid Auditee type
		String SID = Lib.getCellValue(XLPATH, "Configure Audit Type", 207, 0);
		MA.SetSelectAuditee(SID);
		chiledTest.log(Status.INFO, "Invalid Auditee selection from Drop-down.");
		Thread.sleep(2000);
		MA.ClearEnteredAuditee();
		
		//Invalid Auditee type
		String SC = Lib.getCellValue(XLPATH, "Configure Audit Type", 219, 0);
		MA.SetSelectAuditee(SC);
		chiledTest.log(Status.INFO, "Add one more character to see Auditee in drop-down.");
		Thread.sleep(2000);
		MA.ClearEnteredAuditee();
	}
	
	@Test(priority=4)
	public void SelectSmartSearch() throws InterruptedException {
		LoginPageTest l=new LoginPageTest(driver);
		MyAuditsPageTest MA = new MyAuditsPageTest(driver);
		chiledTest = parentTest.createNode("User click smart search field.");
		String SS = Lib.getCellValue(XLPATH, "Configure Audit Type", 216, 0);
		MA.SetSearchButton(SS);
		chiledTest.log(Status.INFO, "Search results based on selected Auditee type.");
		Thread.sleep(2000);
		MA.ClearSearchBTN();
		
		String SS1 = Lib.getCellValue(XLPATH, "Configure Audit Type", 206, 0);
		MA.SetSearchButton(SS1);
		chiledTest.log(Status.INFO, "Search results based on selected Audit type.");
		Thread.sleep(2000);
		MA.ClearSearchBTN();
		
		String SS2 = Lib.getCellValue(XLPATH, "Configure Audit Type", 186, 0);
		MA.SetSearchButton(SS2);
		chiledTest.log(Status.INFO, "Search results based on selected ID.");
		Thread.sleep(2000);
		MA.ClearSearchBTN();
		
		String SS3 = Lib.getCellValue(XLPATH, "Schedule", 33, 0);
		MA.SetSearchButton(SS3);
		chiledTest.log(Status.INFO, "Search results based on Auditor.");
		Thread.sleep(2000);
		MA.ClearSearchBTN();
		
		String SS4 = Lib.getCellValue(XLPATH, "Configure Audit Type", 207, 0);
		MA.SetSearchButton(SS4);
		MA.VerifynoDataAvailableText();
		chiledTest.log(Status.INFO, " Invalid Search results in search box.");
		Thread.sleep(2000);
		MA.ClearSearchBTN();
		
	
	}
	
	@Test(priority=5)
	public void ExecutionStatus() throws InterruptedException {
		LoginPageTest l=new LoginPageTest(driver);
		MyAuditsPageTest MA = new MyAuditsPageTest(driver);
		String SE = Lib.getCellValue(XLPATH, "My Audit Page", 4, 1);
		MA.SetSelectExecutionStatus(SE);
		Thread.sleep(2000);
		MA.ClickMatched();
		
		
		String SE1 = Lib.getCellValue(XLPATH, "My Audit Page", 5, 1);
		MA.SetSelectExecutionStatus(SE1);
		Thread.sleep(2000);
		MA.ClickMatched();
		
		
		String SE2 = Lib.getCellValue(XLPATH, "My Audit Page", 6, 1);
		MA.SetSelectExecutionStatus(SE2);
		Thread.sleep(2000);
		MA.ClickMatched();
		
		
		String SE3 = Lib.getCellValue(XLPATH, "My Audit Page", 7, 1);
		MA.SetSelectExecutionStatus(SE3);
		Thread.sleep(2000);
		MA.ClickMatched();
		
		
		String SE4 = Lib.getCellValue(XLPATH, "My Audit Page", 8, 1);
		MA.SetSelectExecutionStatus(SE4);
		Thread.sleep(2000);
		MA.ClickMatched();
		
		
		String SE5 = Lib.getCellValue(XLPATH, "My Audit Page", 9, 1);
		MA.SetSelectExecutionStatus(SE5);
		Thread.sleep(2000);
		MA.ClickMatched();
		
		
		String SE6 = Lib.getCellValue(XLPATH, "My Audit Page", 10, 1);
		MA.SetSelectExecutionStatus(SE6);
		Thread.sleep(2000);
		MA.ClickMatched();
		
		MA.DeslectAuditType();
		MA.DeslectAuditType();
		MA.DeslectAuditType();
		MA.DeslectAuditType();
		MA.DeslectAuditType();
		MA.DeslectAuditType();
		MA.DeslectAuditType();
	
	}
	
	
	
}
