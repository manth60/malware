package scripts;

import java.util.List;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.Status;

import generic.BaseTest;
import generic.Lib;
import pom.AuditSchedulePageTest;
import pom.AuditeeadminConfigurationPageTest;
import pom.ConfigureAuditPageTest;
import pom.EditSchedulePageTest;
import pom.LoginPageTest;
import pom.SelfSchedulePageTest;
import pom.SideMenuPageTest;

public class CreatingLeadAuditorExecutionFunctionalityTest extends BaseTest {

	//Testing the Functionality of the Creating Parent Audit Type Test
		@Test(priority=1)
		public void Creating_Parent_Audit_Type_Test() throws InterruptedException
		{
			ConfigureAuditPageTest CA = new ConfigureAuditPageTest(driver);

			LoginPageTest l=new LoginPageTest(driver);

			parentTest = extent.createTest("Audit Schedule Functionality Test", "Testing the functionality for creating the Lead Auditor schedule.");

			chiledTest = parentTest.createNode("Creating Parent Audit Type Test for Lead Auditor execution functionality.");

			System.out.println("Creating Parent Audit Type Test");

			WebDriverWait wait = new WebDriverWait(driver, 20);

			chiledTest.log(Status.INFO, "Entered User Name and Password");
			String un=Lib.getCellValue(XLPATH, "Login Credentials",3,0);
			l.setusername(un);

			String pw=Lib.getCellValue(XLPATH,"Login Credentials",3,1);
			l.setpassword(pw);

			l.ClickSigninBTN();
			chiledTest.log(Status.INFO, "Singin Button is Clicked");

			//Verifying sign in successful message is displayed
			l.verifySignedInSuccessMsgIsDisplayed(driver);
			chiledTest.log(Status.INFO, "Signed in successfully. Message is Displayed");
			
	        //clicking on the Scroll Bar
			CA.ClickScrollBar(driver);

			//Clicking on the User Manage from side menu
			CA.ClickConfigureAudit(driver);
			chiledTest.log(Status.INFO, "Configure Audit is Clicked");

			//Clicking on the configure Audit Sub menu
			CA.ClickConfigureAuditSubMenu();

			//Clicking on the Create Audit Type Button
			CA.ClickCreateAuditTypeBTN(driver);
			chiledTest.log(Status.INFO, "Create Audit Type Button is Clicked");

			//******* Begin Tab *****************************

			//Passing the Values to Audit Type Name
			String ATN = Lib.getCellValue(XLPATH, "AuditScheduleScenarios", 3, 0);
			CA.SetAuditTypeName(ATN, driver);
			chiledTest.log(Status.INFO, "Audit Name is Entered");


			//Passing the values to Select Audit Type
			String SAT = Lib.getCellValue(XLPATH, "Configure Audit Type", 23, 0);
			CA.SetSelectAuditType(SAT, driver);
			chiledTest.log(Status.INFO, "Audit type is Selected");

			//clicking on the Matching
			CA.ClickMatch();

			//Clicking on the Next Button
			CA.ClickBeginTabNextButton();
			chiledTest.log(Status.INFO, "Next Button is Clicked");

			//******* DEFINE TAB *****************************

			//Clicking on the Parent Type Audit Radio Button
			CA.ClickParentTypeAuditRadioBTN(driver);
			chiledTest.log(Status.INFO, "Parent audit type Radio Button is Clicked");

			//Clicking on the select Group 
			CA.ClickSelectGrouptype(driver);

			//Passing the values to  select Group type
			String SGT = Lib.getCellValue(XLPATH, "Configure Audit Type", 27, 0);
			CA.SetSelectGrouptype(SGT);

			//clicking on the Matching
			CA.ClickMatch();

			//Passing the Values to Select CheckPoint 
			String SCG1 = Lib.getCellValue(XLPATH, "Group", 8, 0);
			CA.SetSelectCheckPointGroup(SCG1, driver);

			//clicking on the Matching
			CA.ClickMatch();

			//Passing the Values to Select CheckPoint 
			String SCG2 = Lib.getCellValue(XLPATH, "Group", 9, 0);
			CA.SetSelectCheckPointGroup(SCG2, driver);

			//clicking on the Matching
			CA.ClickMatch();

			//Passing the Values to Select CheckPoint 
			String SCG3 = Lib.getCellValue(XLPATH, "Group", 10, 0);
			CA.SetSelectCheckPointGroup(SCG3, driver);

			//clicking on the Matching
			CA.ClickMatch();

			//selecting last option under Entries Fields
			CA.SetShowAndRow(driver);

			Thread.sleep(3000);
			//Checking the Count of the Check Points
			WebElement CheckPointsCounts = driver.findElement(By.xpath("//table[@id='tableWithSearchInner']/tbody/tr"));
			wait.until(ExpectedConditions.visibilityOf(CheckPointsCounts));
			List<WebElement> CPSixze = driver.findElements(By.xpath("//table[@id='tableWithSearchInner']/tbody/tr"));
			int Actual_CPCount = CPSixze.size();
			int Expected_CPCount = 12;
		//	Assert.assertEquals(Actual_CPCount, Expected_CPCount, "Check Points Count are Wrong");
			System.out.println("Displayed Total Checkpoints counts is : " + Expected_CPCount);

			//Clicking on the Next Button
			CA.ClickDefineTabNextButton();
			chiledTest.log(Status.INFO, "Next Button is Clicked");

			// ********* Evaluate TAB ***************************

			//Passing the Values to Low Risk Scoring
			String LR = Lib.getCellValue(XLPATH, "RSL Scenarios 1", 76, 0);
			CA.SetLowRiskScoring(LR);
			chiledTest.log(Status.INFO, "Low Risk Scoring is Entered");

			//Passing the Values to Medium Risk Scoring
			String MR = Lib.getCellValue(XLPATH, "RSL Scenarios 1", 67, 0);
			CA.SetMeadiumRiskScroring(MR);
			chiledTest.log(Status.INFO, "Medium Risk Scoring is Entered");

			//Passing the Values to High Risk Scoring
			String HR = Lib.getCellValue(XLPATH, "RSL Scenarios 1", 72, 0);
			CA.SetHighRiskScoring(HR);
			chiledTest.log(Status.INFO, "High Risk Scoring is Entered");

			//Passing the Values to Zero Tolerance Risk Scoring
			String ZR = Lib.getCellValue(XLPATH, "RSL Scenarios 1", 80, 0);
			CA.SetZeroTaleranceRiskScoring(ZR);
			chiledTest.log(Status.INFO, "Zero Talerence Risk Scoring is Entered");

			//Clicking on the Next Button
			CA.ClickEvaluteTabNextButton();
			chiledTest.log(Status.INFO, "Next Button is Clicked");

			//Verifying Would you like to configure Roles for this Audit Type? Alert is Displayed
			Alert Alert = driver.switchTo().alert();
			Alert.dismiss();

			//******** CONFIGURE  TAB **************

			//Clicking on the Eliminate Auditee Sign off Toggle button
			CA.ClickEliminateAuditeeSignoffTaggleBTN();
			chiledTest.log(Status.INFO, "Eliminate Auditee Sign off Toggle button is clicked");

			//Clicking on the Select verifier
			CA.clickSelectVerifier();

			//Passing the Values to Select Verifier
			String SV = Lib.getCellValue(XLPATH, "Configure Audit Type", 58, 0);
			CA.SetSelectVerifier(SV);
			chiledTest.log(Status.INFO, "Verifier is Selected");

			//Clicking on the Match
			CA.ClickMatch();

			//Passing the Values to Low Due Days
			String SL = Lib.getCellValue(XLPATH, "Configure Audit Type", 73, 0);
			CA.SetLowDueDays(SL);
			chiledTest.log(Status.INFO, "Low Due Days is Entered");

			//Passing the Values to Medium Due Days
			String SM = Lib.getCellValue(XLPATH, "Configure Audit Type", 79, 0);
			CA.SetMediumDueDays(SM);
			chiledTest.log(Status.INFO, "Medium Due Days is Entered");

			//Passing the Values to High Due Days
			String SH = Lib.getCellValue(XLPATH, "Configure Audit Type", 85, 0);
			CA.SetHighDueDays(SH);
			chiledTest.log(Status.INFO, "High Due Days is Entered");

			//Passing the Values to ZT Due Days
			String SZ = Lib.getCellValue(XLPATH, "Configure Audit Type", 91, 0);
			CA.SetZTDueDays(SZ);
			chiledTest.log(Status.INFO, "ZT Due Days is Entered");

			//Clicking on the Next Button
			CA.ClickConfigureTabNextButton();
			chiledTest.log(Status.INFO, "Next Button is Clicked");

			//******************** Finalize Tab ************************

			Thread.sleep(5000);

			WebElement TotalScore = driver.findElement(By.xpath("//input[@class='audit_type_total_score form-control text-danger main-type']"));
			String TotalScoreCount = wait.until(ExpectedConditions.visibilityOf(TotalScore)).getAttribute("value");
			double d = 180;
			String Str = Double.toString(d);
			Assert.assertEquals(TotalScoreCount, Str, "Total Score count is showing Wrong");
			System.out.println("Diplayed Total Score is : " + Str);

			//Checking the To Count
			String Actual_TO = driver.findElement(By.xpath("//input[@id='audit_type_audit_ratings_attributes_0_to']")).getAttribute("value");
			System.out.println("TO Count is : " + Actual_TO);
			int d1 = 100;
			String Str1 = Integer.toString(d1);
			Assert.assertEquals(Actual_TO, Str1, "Total Score count is showing Wrong");

			//Clicking on the Add Row Button
			CA.ClickAddRow(driver);
			chiledTest.log(Status.INFO, "Add Row Button is Clicked");

			//Passing the Values to First TO
			String FT = Lib.getCellValue(XLPATH, "All 3 Scoring Logic", 20, 0);
			CA.SetFirstTo(FT, driver);

			//Passing the Values to First Out Come
			String FO = Lib.getCellValue(XLPATH, "All 3 Scoring Logic", 29, 0);
			CA.SetFirstOutCome(FO, driver);
			chiledTest.log(Status.INFO, "Out Come is Entered");

			//Clicking on the Add Row Button
			CA.ClickAddRow(driver);
			chiledTest.log(Status.INFO, "Add Row Button is Clicked");

			//Passing the Values to Second TO
			String ST1 = Lib.getCellValue(XLPATH, "All 3 Scoring Logic", 21, 0);
			CA.SetSecondTo(ST1, driver);

			//Passing the Values to Second Out Come
			String SO = Lib.getCellValue(XLPATH, "All 3 Scoring Logic", 28, 0);
			CA.SetSecondOutCome(SO, driver);
			chiledTest.log(Status.INFO, "Out Come is Entered");

			//Passing the Values to Third Out Come
			String TO1 = Lib.getCellValue(XLPATH, "All 3 Scoring Logic", 27, 0);
			CA.SetThirdOutCome(TO1, driver);
			chiledTest.log(Status.INFO, "Out Come is Entered");

			//Clicking on the Submit Button
			CA.ClickSubmitBTN(driver);
			chiledTest.log(Status.INFO, "Submit Button is Clicked");

			//Verifying Audit type created successfully. Success Message is Displayed
		//	CA.VerifyAuditTypeCreatedSuccessfullyMsgIsDisplayed(driver);
			chiledTest.log(Status.INFO, "Audit type created successfully. Success Message is Displayed");

			System.out.println("**************************************************************");

		}

		//Configuring the Auditee admin configuration
		@Test(priority=2, dependsOnMethods= {"Creating_Parent_Audit_Type_Test"})
		public void Auditee_Admin_Configuration_Test() throws InterruptedException
		{
			SideMenuPageTest SM = new SideMenuPageTest(driver);

			AuditeeadminConfigurationPageTest AA = new AuditeeadminConfigurationPageTest(driver);

			AuditSchedulePageTest SP = new AuditSchedulePageTest(driver);

			LoginPageTest l=new LoginPageTest(driver);

			chiledTest = parentTest.createNode("Auditee Admin Configuration Test for Lead auditor execution functinality test.");

			System.out.println("Auditee Admin Configuration Test");

			l.ClickProfileBTN(driver);

			l.ClickLogoutBTN();

			chiledTest.log(Status.INFO, "Entered Valid UserName and Valid Password");
			String un=Lib.getCellValue(XLPATH, "Login Credentials",3,0);
			l.setusername(un);

			String pw=Lib.getCellValue(XLPATH,"Login Credentials",3,1);
			l.setpassword(pw);

			//clicking on the Login Button
			l.ClickSigninBTN();
			chiledTest.log(Status.INFO, "Sigin Button is Clicked");

			//Verify Signed in Successfully Message is Displayed
			l.verifySignedInSuccessMsgIsDisplayed(driver);
			chiledTest.log(Status.INFO, "Signed in successfully. Success Message is Displayed");

			//clicking on the Scroll bar
			SM.ClickScrollBar();

			//clicking on the Configure audit
			SM.ClickConfigureAudit();

			//clicking on the Audoitee admin Configure under side menu
			SM.clickAuditeeAdminConfigure();

			AA.ClickSelectAuditType();

			//passing the values to Select Audit Type
			String SA = Lib.getCellValue(XLPATH, "AuditScheduleScenarios", 3, 0);
			AA.SetSetAuditType(SA);

			AA.ClickMatchedText();

			//passing the Values to Issue Assignment
			String IA = Lib.getCellValue(XLPATH, "Auditee Admin Configuration", 3, 0);
			AA.SetIssueAssignment(IA);

			AA.ClickMatchedText();

			//passing the Values to Issue Assignment
			String IA1 = Lib.getCellValue(XLPATH, "Auditee Admin Configuration", 4, 0);
			AA.SetIssueAssignment(IA1);

			AA.ClickMatchedText();

			//Passing the Values to Respond issue
			String RI = Lib.getCellValue(XLPATH, "Auditee Admin Configuration", 3, 1);
			AA.SetRespondIssue(RI);

			AA.ClickMatchedText();

			//clicking on the Save button
			AA.ClickSaveBTN();

			//Verifying Auditee configuration successfully done message is Displayed
		//	AA.VerifyAuditeeConfigurationSuccessfullyDoneMsGIsDisplayed();

			System.out.println("******************************");

		}

		//Testing the Functionality of the Create Audit Schedule for General Group  AuditType Test
		@Test(priority=3, dependsOnMethods= {"Auditee_Admin_Configuration_Test"})
		public void Creating_Audit_Schedule_Test() throws InterruptedException
		{
			AuditSchedulePageTest SP = new AuditSchedulePageTest(driver);
			SelfSchedulePageTest SC=new SelfSchedulePageTest(driver);
			LoginPageTest l=new LoginPageTest(driver);

			chiledTest = parentTest.createNode("Creating Audit Schedule Test for Lead Auditor execution.");

			System.out.println("Creating Audit Schedule Test");

			l.ClickProfileBTN(driver);

			l.ClickLogoutBTN();

			chiledTest.log(Status.INFO, "Entered Valid UserName and Valid Password");
			String un=Lib.getCellValue(XLPATH, "Login Credentials",3,0);
			l.setusername(un);

			String pw=Lib.getCellValue(XLPATH,"Login Credentials",3,1);
			l.setpassword(pw);

			//clicking on the Login Button
			l.ClickSigninBTN();
			chiledTest.log(Status.INFO, "Sigin Button is Clicked");

			//Verify Signed in Successfully Message is Displayed
			l.verifySignedInSuccessMsgIsDisplayed(driver);
			chiledTest.log(Status.INFO, "Signed in successfully. Success Message is Displayed");

			SP.ClickScrollBar(driver);

			//Clicking on the Schedule 
			SP.ClickSchedule(driver);

			//Clicking on the Audit Schedule
			SP.ClickAuditSchedule(driver);
			chiledTest.log(Status.INFO, "Audit Schedule is Clicked");

			//Clicking on the Create New Schedule Button
			SP.ClickCreateNewSheduleBTN();
			chiledTest.log(Status.INFO, "Create New Schedule Button is clicked");

			//Clicking on the Select Audit Type
			SP.ClickSelectAuditType(driver);

			//Passing the Values to Select Audit type from "Configure Audit Type" sheet
			String SAT1 = Lib.getCellValue(XLPATH, "AuditScheduleScenarios", 3, 0);
			SP.SetSelectAuditType(SAT1, driver);
			chiledTest.log(Status.INFO, "Audit Type is Selected");

			//Clicking on the Matched 
			SP.ClickMatched();

			//Selecting Vendor Option Under Select Auditee Type Drop Down List
			SP.ClickVendorOption(driver);

			//Clicking on the Select country/State/Location
			SP.ClickSelectCountryStateLocation(driver);

			//Passing the Values to Select country/State/Location
			String CSL1 = Lib.getCellValue(XLPATH, "Schedule", 6, 0);
			SP.SetCountryStateLocation(CSL1, driver);
			chiledTest.log(Status.INFO, "Country/State/Location is Entered");

			//Clicking on the Matched 
			SP.ClickMatched();

			//Clicking on the Select Auditee
			SP.ClickSelectAuditee(driver);

			//Passing the Values to Select Auditee
			String SA2 = Lib.getCellValue(XLPATH, "Schedule", 9, 0);
			SP.SetSelectAuditeeText(SA2, driver);
			chiledTest.log(Status.INFO, "Select Auditee is Entered");

			//Clicking on the Matched 
			SP.ClickMatched();

			//Clicking on the Start Date
			SP.ClickStartDate();


			//Clicking on the End date
			SP.ClickEndDate();

			//Negative Scenario
			//Selecting Auditor
			String SA3 = Lib.getCellValue(XLPATH, "Schedule", 33, 0);
			SP.SetSetSelectAuditor(SA3);
			chiledTest.log(Status.INFO, "System should automatically remove selected Auditor if execution is for Lead Auditor.");

			//Clicking on the Matched 
			SP.ClickMatched();
			//Negative Scenario
			

			//clicking on the Mutiple auditor
			SP.ClickMultipleAuditorBTN();

			///clicking on the Lead Audior
			SP.ClickIsLeadauditorCheckBox();

			//Also negative scenarios
			//clicking on the Lead auditor
			SP.ClickLeadAudior();
			chiledTest.log(Status.INFO, "Without enterd Auditor select Lead Auditor.");
			//Selecting the Lead Auditor
			//SP.SetLeadAudior();
			chiledTest.log(Status.INFO, "No result found should display.");
			//Also negative scenarios
			//Review period new test case by Manthan
			SC.SelectReviewPeriodFrom();
			chiledTest.log(Status.INFO, "Select review period from date.");
			
			SC.SelectReviewPeriodTo();
			chiledTest.log(Status.INFO, "Select review period to date.");
			
			
			
			
			//Selecting Auditor
			String MA = Lib.getCellValue(XLPATH, "Schedule", 34, 0);
			SP.SetMultipleAuditor(MA);
			chiledTest.log(Status.INFO, "HitheshAuditor is Selected");

			//Clicking on the Matched 
			SP.ClickMatched();

			//Selecting Auditor
			String MA1 = Lib.getCellValue(XLPATH, "Schedule", 33, 0);
			SP.SetMultipleAuditor(MA1);
			chiledTest.log(Status.INFO, "AuditorTest1 is Selected");

			//Clicking on the Matched 
			SP.ClickMatched();

			//Selecting Auditor
			String MA3 = Lib.getCellValue(XLPATH, "Schedule", 35, 0);
			SP.SetMultipleAuditor(MA3);
			chiledTest.log(Status.INFO, "AuditorTest2 is Selected");

			//Clicking on the Matched 
			SP.ClickMatched();
	        Thread.sleep(2000);
			//clicking on the Lead auditor
			SP.ClickLeadAudior();

			//Selecting the Lead Auditor
			SP.SetLeadAudior();
			chiledTest.log(Status.INFO, "Lead Auditor is Selected");
			//Clicking on the Save Button
			SP.ClickSaveBTN(driver);
			chiledTest.log(Status.INFO, "Save Button is Clicked");

			//Verifying Schedule created successfully Success Message is Displayed
		//	SP.VerifyScheduleCreatedSuccessfullyMSGIsDisplayed(driver);
			chiledTest.log(Status.INFO, "Schedule created successfully. Success Message is displayed");

			System.out.println("****************************************************");

		}
	
		
		@Test(priority=5, dependsOnMethods= {"Creating_Audit_Schedule_Test"})
	public void UpdateLeadAudit() throws InterruptedException {
			AuditSchedulePageTest SP = new AuditSchedulePageTest(driver);
			chiledTest = parentTest.createNode("Valid Audit Type is Searched Under Select Audit Type Search Text Filed for Update.");
			Thread.sleep(3000);
			String SAT = Lib.getCellValue(XLPATH, "AuditScheduleScenarios", 3, 0);
			SP.SetSelectAuditTypeSearchFiled(SAT);
			chiledTest.log(Status.INFO, "Valid Audit Type is Searched Under Select Audit Type Search Text Filed");

			SP.ClickMatched();

			//Clicking on the Go Button
			SP.ClickGoBTN();
			Thread.sleep(2000);
            driver.findElement(By.xpath("//tr[@class='edit_audit_schedule_row odd']")).click();
            EditSchedulePageTest ESP = new EditSchedulePageTest(driver);
			
			//##SM Updated
			try
			{  
				ESP.ChangeAuditstartDate();
				ESP.ChangeAuditEndDate();	
			}catch(Exception e)
			{			
			}

			//Clicking on the Update Button
			Thread.sleep(2000);
			chiledTest.log(Status.INFO, "Updated Schedule date");
			ESP.ClickUpdateBTN();
			chiledTest.log(Status.INFO, "Schedule is updated successfully");
	       
            
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
